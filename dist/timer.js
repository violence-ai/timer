(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Timer", [], factory);
	else if(typeof exports === 'object')
		exports["Timer"] = factory();
	else
		root["Timer"] = factory();
})(typeof self === 'undefined' ? this : self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it uses a non-standard name for the exports (exports).
(() => {
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./src/timer.ts ***!
  \**********************/


function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var Timer = /*#__PURE__*/function () {
  function Timer(options) {
    _classCallCheck(this, Timer);
    _defineProperty(this, "cubicFunctions", {
      'linear': [0, 0, 1, 1],
      'ease': [.25, .1, .25, 1],
      'ease-in': [.42, 0, 1, 1],
      'ease-out': [0, 0, .58, 1],
      'ease-in-out': [.42, 0, .58, 1]
    });
    _defineProperty(this, "refreshRateMs", 50);
    // ms
    _defineProperty(this, "duration", 0);
    // ms
    _defineProperty(this, "cubicBezierPoints", [0, 0, 1, 1]);
    // linear
    _defineProperty(this, "remained", 0);
    _defineProperty(this, "timerInterval", null);
    _defineProperty(this, "onTimeFunc", null);
    _defineProperty(this, "onEndFunc", null);
    _defineProperty(this, "days", 0);
    _defineProperty(this, "hours", 0);
    _defineProperty(this, "minutes", 0);
    _defineProperty(this, "seconds", 0);
    _defineProperty(this, "ms", 0);
    this.duration = options.duration;
    this.remained = options.duration;
    if (options.refreshRateMs) {
      this.refreshRateMs = options.refreshRateMs >= 5 ? options.refreshRateMs : 5; // min 5, otherwise there will be performance problems!
    }

    if (options.cubicBezier) {
      if (typeof options.cubicBezier === 'string') {
        if (this.cubicFunctions.hasOwnProperty(options.cubicBezier)) {
          this.cubicBezierPoints = this.cubicFunctions[options.cubicBezier];
        } else {
          throw Error('Incorrect cubicBezier function name');
        }
      } else if (Array.isArray(options.cubicBezier)) {
        this.cubicBezierPoints = options.cubicBezier;
      }
    }
  }
  _createClass(Timer, [{
    key: "start",
    value: function start() {
      var _this = this;
      var timingFunction = Timer.cubicBezier(this.cubicBezierPoints);
      this.timerInterval = setInterval(function () {
        _this.remained -= _this.refreshRateMs;
        // if end
        if (_this.remained <= 0) {
          // correct final value
          _this.remained = 0;
          // stop cycle
          _this.stop();
          // if listen onEnd event
          if (_this.onEndFunc) {
            _this.onEndFunc();
          }
        }
        // calc
        _this.calcRemained();
        // if listen onTime event
        if (_this.onTimeFunc) {
          var t = (_this.duration - _this.remained) / (_this.duration / 100) / 100; // 0-1
          _this.onTimeFunc({
            days: _this.days,
            hours: _this.hours,
            minutes: _this.minutes,
            seconds: _this.seconds,
            ms: _this.ms,
            progressValue: timingFunction(t) * 100 // 0-100
          });
        }
      }, this.refreshRateMs);
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.timerInterval) {
        clearInterval(this.timerInterval);
      }
    }
  }, {
    key: "onTime",
    value: function onTime(func) {
      this.onTimeFunc = func;
      return this;
    }
  }, {
    key: "onEnd",
    value: function onEnd(func) {
      this.onEndFunc = func;
      return this;
    }
  }, {
    key: "calcRemained",
    value: function calcRemained() {
      var remained = this.remained;
      this.days = Math.floor(remained / 86400000);
      remained -= this.days * 86400000;
      this.hours = Math.floor(remained / 3600000);
      remained -= this.hours * 3600000;
      this.minutes = Math.floor(remained / 60000);
      remained -= this.minutes * 60000;
      this.seconds = Math.floor(remained / 1000);
      remained -= this.seconds * 1000;
      this.ms = remained;
    }
  }], [{
    key: "cubicBezier",
    value: function cubicBezier(points) {
      var p0 = {
          x: 0,
          y: 0
        },
        p1 = {
          x: points[0],
          y: points[1]
        },
        p2 = {
          x: points[2],
          y: points[3]
        },
        p3 = {
          x: 1,
          y: 1
        };
      var curve = function curve(p0, p1, p2, p3, t) {
        return Math.pow(1 - t, 3) * p0 + 3 * t * Math.pow(1 - t, 2) * p1 + 3 * Math.pow(t, 2) * (1 - t) * p2 + Math.pow(t, 3) * p3;
      };
      var bezier = {};
      for (var i = 1; i <= 1000; i++) {
        var t = i * 0.001;
        var x = curve(p0.x, p1.x, p2.x, p3.x, t); // 0-1 time
        var y = curve(p0.y, p1.y, p2.y, p3.y, t); // 0-1 animate
        bezier[x.toFixed(3)] = y;
      }
      return function (t) {
        var value = bezier[t.toFixed(3)];
        if (value === undefined) {
          var filter = Object.keys(bezier).reverse().filter(function (x) {
            return parseFloat(x) < t;
          });
          if (filter.length > 0) {
            return bezier[filter[0]];
          }
          return 0;
        }
        return value;
      };
    }
  }]);
  return Timer;
}();
exports["default"] = Timer;
})();

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,